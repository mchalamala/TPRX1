# -*- coding: utf-8 -*-
"""Scoring_Algorithm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/127w-uWfjXf0cRqHihffmedV25krMxFWt

[Cell-Cycle Scoring and Regression](https://satijalab.org/seurat/articles/cell_cycle_vignette.html)

[Transcriptomic differences between human 8-cell-like cells reprogrammed with different methods](https://pmc.ncbi.nlm.nih.gov/articles/PMC10444576/)



---

Taubenschmid-Stowers et al., 2022 - **GSM5389327**
[8C-like cells capture the human zygotic genome activation program in vitro](https://github.com/rargelaguet/DUX4_8CLC_hESCs)


Yu et al., 2022 - **GSM5939549**
[Recapitulating early human development with 8C-like cells](https://github.com/ChenManqi2/ci8CLC_scripts)

Moya-Jódar et al., 2023 - **GSM5931737** no github

Yoshihara et al., 2022 - **E-MTAB-10581** [Transient DUX4 expression in human embryonic stem cells induces blastomere-like expression program that is marked by SLC34A2](https://github.com/my0916/STRT2)

Yan et al., 2013 - **GSE36552**
"""

required_packages <- c("Seurat", "readxl", "Matrix", "SeuratObject", "hdf5r")

for (pkg in required_packages) {
  if (!require(pkg, character.only = TRUE)) {
    install.packages(pkg)
  }
}

library(Seurat)
library(readxl)
library(Matrix)
library(hdf5r)

marker_file <- "/content/List of Markers.xlsx"

markers <- read_excel(marker_file)
print(colnames(markers))
marker_genes <- toupper(markers$Gene)

process_h5 <- function(h5_file) {
  data <- Read10X_h5(h5_file)
  expr_matrix <- as.matrix(data)
  return(expr_matrix)
}

calculate_scores <- function(expr_matrix, markers) {
  present_markers <- markers[markers %in% rownames(expr_matrix)]
  cat("Markers Found:", length(present_markers), "/", length(markers), "\n")

  if (length(present_markers) == 0) {
    stop("No matching markers found in dataset.")
  }

  scores <- colSums(expr_matrix[present_markers, , drop = FALSE])

  sorted_scores <- sort(scores, decreasing = TRUE)

  overall_totipotency <- mean(sorted_scores)
  cat("Overall Totipotency Score:", overall_totipotency, "\n")

  return(list(scores = sorted_scores, overall_score = overall_totipotency))
}

expr_matrix <- process_h5("/content/MJ_5iLAF_filtered_feature_bc_matrix.h5")

result <- calculate_scores(expr_matrix, marker_genes)

write.csv(result$scores, "totipotency_scores_h5.csv", row.names = TRUE)

cat("Final Totipotency Score (Mean Raw Score):", result$overall_score, "\n")

required_packages <- c("Seurat", "readxl", "Matrix", "SeuratObject", "hdf5r", "dplyr", "ggplot2")

for (pkg in required_packages) {
  if (!require(pkg, character.only = TRUE)) {
    install.packages(pkg, repos = "http://cran.us.r-project.org")
  }
}

library(Seurat)
library(readxl)
library(Matrix)
library(hdf5r)
library(dplyr)
library(ggplot2)

marker_file <- "/content/List of Markers.xlsx"
h5_file <- "/content/MJ_5iLAF_filtered_feature_bc_matrix.h5"

markers <- read_excel(marker_file)
marker_genes <- toupper(markers$Gene)

process_h5 <- function(h5_file) {
  data <- Read10X_h5(h5_file)
  expr_matrix <- as.matrix(data)
  return(expr_matrix)
}

expr_matrix <- process_h5(h5_file)

seurat_obj <- CreateSeuratObject(counts = expr_matrix, project = "Totipotency", min.cells = 3, min.features = 200)
seurat_obj <- NormalizeData(seurat_obj)
seurat_obj <- FindVariableFeatures(seurat_obj, selection.method = "vst", nfeatures = 2000)
seurat_obj <- ScaleData(seurat_obj)
seurat_obj <- RunPCA(seurat_obj, features = VariableFeatures(object = seurat_obj))

seurat_obj <- FindNeighbors(seurat_obj, dims = 1:20)
seurat_obj <- FindClusters(seurat_obj, resolution = 0.5)
seurat_obj <- RunUMAP(seurat_obj, dims = 1:20)

cat("\nCluster Distribution:\n")
print(table(seurat_obj$seurat_clusters))

calculate_cluster_scores <- function(seurat_obj, expr_matrix, markers) {
  cluster_ids <- unique(seurat_obj$seurat_clusters)
  cluster_scores <- list()

  for (cluster in cluster_ids) {
    cluster_cells <- WhichCells(seurat_obj, idents = cluster)
    if (length(cluster_cells) == 0) {
      cluster_scores[[as.character(cluster)]] <- 0
      next
    }

    cluster_expr <- expr_matrix[, cluster_cells, drop = FALSE]
    present_markers <- markers[markers %in% rownames(cluster_expr)]

    if (length(present_markers) > 0) {
      cluster_score <- sum(colSums(cluster_expr[present_markers, , drop = FALSE]))
    } else {
      cluster_score <- 0
    }

    cluster_scores[[as.character(cluster)]] <- cluster_score
  }

  return(cluster_scores)
}

cluster_scores <- calculate_cluster_scores(seurat_obj, expr_matrix, marker_genes)

top_cluster <- names(which.max(unlist(cluster_scores)))
cat("\nTop Totipotency Cluster:", top_cluster, "assigned as 8CLC.\n")

seurat_obj <- AddMetaData(seurat_obj, metadata = seurat_obj$seurat_clusters, col.name = "CellType")
seurat_obj$CellType <- as.character(seurat_obj$seurat_clusters)
seurat_obj$CellType[seurat_obj$seurat_clusters == as.numeric(top_cluster)] <- "8CLC"

cat("\nUpdated Cell Type Distribution:\n")
print(table(seurat_obj$CellType))

if (!"8CLC" %in% seurat_obj$CellType) {
  stop("❌ Error: 8CLC assignment failed. Check cluster labeling.")
}

totipotent_cells <- WhichCells(seurat_obj, expression = CellType == "8CLC")

if (length(totipotent_cells) == 0) {
  stop("❌ Error: No cells found for 8CLC cluster. Please check the cluster assignment.")
}

totipotent_expr <- expr_matrix[, totipotent_cells, drop = FALSE]

calculate_scores <- function(expr_matrix, markers) {
  present_markers <- markers[markers %in% rownames(expr_matrix)]
  cat("Markers Found:", length(present_markers), "/", length(markers), "\n")

  if (length(present_markers) == 0) {
    stop("No matching markers found in dataset.")
  }

  scores <- colSums(expr_matrix[present_markers, , drop = FALSE])
  sorted_scores <- sort(scores, decreasing = TRUE)

  overall_totipotency <- mean(sorted_scores)
  cat("Overall Totipotency Score:", overall_totipotency, "\n")

  return(list(scores = sorted_scores, overall_score = overall_totipotency))
}

totipotency_8CLC <- calculate_scores(totipotent_expr, marker_genes)

write.csv(totipotency_8CLC$scores, "/content/totipotency_scores_8CLC.csv", row.names = TRUE)

cat("Final Totipotency Score (Mean Raw Score) for 8CLC:", totipotency_8CLC$overall_score, "\n")

umap_plot <- DimPlot(seurat_obj, reduction = "umap", group.by = "CellType") +
  ggtitle("UMAP Visualization of Cell Clusters with 8CLC Highlighted")
ggsave("/content/umap_8CLC_plot.png", plot = umap_plot, width = 6, height = 4, dpi = 300)

required_packages <- c("Seurat", "readxl", "Matrix", "SeuratObject")

for (pkg in required_packages) {
  if (!require(pkg, character.only = TRUE)) {
    install.packages(pkg)
  }
}

library(Seurat)
library(readxl)
library(Matrix)

marker_file <- "/content/List of Markers.xlsx"

markers <- read_excel(marker_file)
print(colnames(markers))
marker_genes <- toupper(markers$Gene)

process_tsv_mtx <- function(feature_file, barcode_file, matrix_file) {
  features <- read.delim(gzfile(feature_file), header = FALSE)
  barcodes <- read.delim(gzfile(barcode_file), header = FALSE)
  matrix <- readMM(gzfile(matrix_file))

  genes <- make.unique(toupper(features$V2))
  cells <- barcodes$V1

  rownames(matrix) <- genes
  colnames(matrix) <- cells

  return(matrix)
}

calculate_scores <- function(expr_matrix, markers) {
  present_markers <- markers[markers %in% rownames(expr_matrix)]
  cat("Markers Found:", length(present_markers), "/", length(markers), "\n")

  if (length(present_markers) == 0) {
    stop("No matching markers found in dataset.")
  }

  scores <- colSums(expr_matrix[present_markers, , drop = FALSE])

  sorted_scores <- sort(scores, decreasing = TRUE)

  overall_totipotency <- mean(sorted_scores)
  cat("Overall Totipotency Score:", overall_totipotency, "\n")

  return(list(scores = sorted_scores, overall_score = overall_totipotency))
}

expr_matrix <- process_tsv_mtx(
  "/content/TS_naive_hPSC_features.tsv.gz",
  "/content/TS_naive_hPSC_barcodes.tsv.gz",
  "/content/TS_naive_hPSC_matrix.mtx.gz"
)

result <- calculate_scores(expr_matrix, marker_genes)

write.csv(result$scores, "TS_totipotency_scores_hPSC.csv", row.names = TRUE)

cat("Final Totipotency Score (Mean Raw Score):", result$overall_score, "\n")

required_packages <- c("Seurat", "readxl", "Matrix", "SeuratObject", "ggplot2", "ggrepel")

for (pkg in required_packages) {
  if (!require(pkg, character.only = TRUE)) {
    install.packages(pkg)
  }
}

library(Seurat)
library(readxl)
library(Matrix)
library(ggplot2)
library(ggrepel)

theme_set(theme_bw(base_size = 10))
theme(plot.title = element_text(hjust=0.5))

marker_file <- "/content/List of Markers.xlsx"
markers <- read_excel(marker_file)
marker_genes <- toupper(markers$Gene)

process_tsv_mtx <- function(feature_file, barcode_file, matrix_file) {
  features <- read.delim(gzfile(feature_file), header = FALSE)
  barcodes <- read.delim(gzfile(barcode_file), header = FALSE)
  matrix <- readMM(gzfile(matrix_file))

  genes <- make.unique(toupper(features$V2))
  cells <- barcodes$V1

  rownames(matrix) <- genes
  colnames(matrix) <- cells

  return(matrix)
}

expr_matrix <- process_tsv_mtx(
  "/content/TS_naive_hPSC_features.tsv.gz",
  "/content/TS_naive_hPSC_barcodes.tsv.gz",
  "/content/TS_naive_hPSC_matrix.mtx.gz"
)

h0 <- CreateSeuratObject(counts = expr_matrix, project = "h0", min.cells = 3, min.features = 200)

h0[["percent.mt"]] <- PercentageFeatureSet(h0, pattern = "^MT-")

h0$percent.largest.gene <- apply(GetAssayData(h0, slot = "counts"), 2, function(x)(100*max(x))/sum(x))

h0 <- subset(h0, subset = nFeature_RNA > 2500 & nFeature_RNA < 10500 & percent.mt < 10 & percent.largest.gene < 20)

h0 <- NormalizeData(h0, normalization.method = "CLR")

h0 <- FindVariableFeatures(h0, selection.method = "vst", nfeatures = 500)

all.genes <- rownames(h0)
h0 <- ScaleData(h0, features = all.genes)

h0 <- RunPCA(h0, features = VariableFeatures(object = h0))

h0 <- FindNeighbors(h0, dims = 1:30)
h0 <- FindClusters(h0, resolution = 0.5)

h0 <- RunUMAP(h0, dims = 1:30)

DimPlot(h0, reduction = "pca", group.by = "seurat_clusters")
DimPlot(h0, reduction = "umap", group.by = "seurat_clusters")

calculate_scores <- function(seurat_obj, markers) {
  present_markers <- markers[markers %in% rownames(seurat_obj)]
  cat("Markers Found:", length(present_markers), "/", length(markers), "\n")

  if (length(present_markers) == 0) {
    stop("No matching markers found in dataset.")
  }

  cluster_assignments <- Idents(seurat_obj)

  cluster_scores <- list()

  for (cluster in unique(cluster_assignments)) {
    cluster_cells <- WhichCells(seurat_obj, idents = cluster)
    cluster_expr <- GetAssayData(seurat_obj, slot = "counts")[present_markers, cluster_cells, drop = FALSE]
    cluster_score <- colSums(cluster_expr)

    cluster_scores[[as.character(cluster)]] <- mean(cluster_score, na.rm = TRUE)
  }

  cluster_scores_df <- data.frame(Cluster = names(cluster_scores), Totipotency_Score = unlist(cluster_scores))
  cluster_scores_df <- cluster_scores_df[order(-cluster_scores_df$Totipotency_Score),]

  print(cluster_scores_df)
  return(cluster_scores_df)
}

totipotency_results <- calculate_scores(h0, marker_genes)

write.csv(totipotency_results, "Totipotency_Scores_by_Cluster.csv", row.names = FALSE)

cat("Totipotency Scores Computed and Saved.\n")

required_packages <- c("Seurat", "readxl", "Matrix", "SeuratObject", "ggplot2", "ggrepel", "data.table", "dplyr")

for (pkg in required_packages) {
  if (!require(pkg, character.only = TRUE)) {
    install.packages(pkg, repos = "http://cran.us.r-project.org")
  }
}

library(Seurat)
library(readxl)
library(Matrix)
library(ggplot2)
library(ggrepel)
library(data.table)
library(dplyr)

marker_file <- "/hb/home/mchalama/toti/List_of_Markers.xlsx"
expr_feature_file <- "/hb/home/mchalama/toti/GSM5939549_prEpiSCs_features.tsv.gz"
expr_barcode_file <- "/hb/home/mchalama/toti/GSM5939549_prEpiSCs_barcodes.tsv.gz"
expr_matrix_file <- "/hb/home/mchalama/toti/GSM5939549_prEpiSCs_matrix.mtx.gz"

markers <- read_excel(marker_file)
marker_genes <- toupper(markers$Gene)

process_tsv_mtx <- function(feature_file, barcode_file, matrix_file) {
  features <- read.delim(gzfile(feature_file), header = FALSE)
  barcodes <- read.delim(gzfile(barcode_file), header = FALSE)
  matrix <- readMM(gzfile(matrix_file))

  genes <- make.unique(toupper(features$V2))
  cells <- barcodes$V1

  rownames(matrix) <- genes
  colnames(matrix) <- cells

  return(matrix)
}

expr_matrix <- process_tsv_mtx(expr_feature_file, expr_barcode_file, expr_matrix_file)

seurat_obj <- CreateSeuratObject(counts = expr_matrix, project = "Totipotency", min.cells = 3, min.features = 200)

seurat_obj <- NormalizeData(seurat_obj, normalization.method = "LogNormalize")
seurat_obj <- FindVariableFeatures(seurat_obj, selection.method = "vst", nfeatures = 2000)
seurat_obj <- ScaleData(seurat_obj)

seurat_obj <- RunPCA(seurat_obj, features = VariableFeatures(object = seurat_obj))
seurat_obj <- FindNeighbors(seurat_obj, dims = 1:30)
seurat_obj <- FindClusters(seurat_obj, resolution = 0.5)

seurat_obj <- RunUMAP(seurat_obj, dims = 1:30)

DimPlot(seurat_obj, reduction = "umap", label = TRUE, repel = TRUE)

print(table(seurat_obj$seurat_clusters))

calculate_scores <- function(expr_matrix, markers) {
  present_markers <- markers[markers %in% rownames(expr_matrix)]
  cat("Markers Found:", length(present_markers), "/", length(markers), "\n")

  if (length(present_markers) == 0) {
    warning("No matching markers found in dataset.")
    return(rep(0, ncol(expr_matrix)))
  }

  scores <- colSums(expr_matrix[present_markers, , drop = FALSE])
  return(scores)
}

cluster_avg_expr <- AverageExpression(seurat_obj, features = marker_genes)$RNA
cluster_totipotency_scores <- colSums(cluster_avg_expr, na.rm = TRUE)

top_cluster <- names(which.max(cluster_totipotency_scores))

top_cluster <- gsub("g", "", top_cluster)
cat("Top Totipotency Cluster:", top_cluster, "\n")

seurat_obj$seurat_clusters <- as.character(seurat_obj$seurat_clusters)

seurat_obj$CellType <- seurat_obj$seurat_clusters
seurat_obj$CellType[seurat_obj$seurat_clusters == top_cluster] <- "8CLC"
message("Cluster ", top_cluster, " assigned as 8CLC.")

seurat_8CLC <- subset(seurat_obj, subset = CellType == "8CLC")

if (ncol(seurat_8CLC) == 0) {
  stop("Error: No cells found in 8CLC cluster. Verify cluster assignment.")
}

expr_matrix_8CLC <- as.matrix(GetAssayData(seurat_8CLC, slot = "counts"))
totipotency_scores_8CLC <- calculate_scores(expr_matrix_8CLC, marker_genes)
overall_totipotency_8CLC <- mean(totipotency_scores_8CLC)

write.csv(totipotency_scores_8CLC, "/hb/home/mchalama/toti/Yu_totipotency_scores_8CLC.csv", row.names = TRUE)

cat("Final Totipotency Score (Mean Raw Score) for 8CLC:", overall_totipotency_8CLC, "\n")

FeaturePlot(seurat_obj, features = marker_genes, reduction = "umap", order = TRUE)

ggsave("/hb/home/mchalama/toti/UMAP_Totipotency.png", width = 8, height = 6)

message("Analysis Complete. Totipotency scores saved.")

required_packages <- c("Seurat", "readxl", "data.table", "dplyr")

for (pkg in required_packages) {
  if (!require(pkg, character.only = TRUE)) {
    install.packages(pkg, repos = "http://cran.us.r-project.org")
  }
}

library(Seurat)
library(readxl)
library(data.table)

marker_file <- "/hb/home/mchalama/toti/List_of_Markers.xlsx"

markers <- read_excel(marker_file)
marker_genes <- toupper(markers$Gene)

process_raw_counts <- function(count_file) {
  raw_counts <- fread(count_file, header = TRUE, sep = "\t")

  if (!("gene" %in% colnames(raw_counts))) {
    stop("The count file must have a 'gene' column.")
  }

  raw_counts[, gene := toupper(gsub("\\..*", "", trimws(gene)))]

  raw_counts <- raw_counts[, lapply(.SD, sum, na.rm = TRUE), by = gene]

  setDF(raw_counts)
  rownames(raw_counts) <- raw_counts$gene
  raw_counts$gene <- NULL

  return(raw_counts)
}

calculate_scores <- function(expr_matrix, markers) {
  present_markers <- markers[markers %in% rownames(expr_matrix)]
  cat("Markers Found:", length(present_markers), "/", length(markers), "\n")

  if (length(present_markers) == 0) {
    stop("No matching markers found in dataset.")
  }

  scores <- expr_matrix[present_markers, , drop = FALSE]

  totipotency_scores <- colSums(scores, na.rm = TRUE)

  overall_totipotency <- mean(totipotency_scores)
  cat("Overall Totipotency Score:", overall_totipotency, "\n")

  return(list(scores = totipotency_scores, overall_score = overall_totipotency))
}

expr_matrix <- process_raw_counts("E-MTAB-10581_raw-count.tsv")

result <- calculate_scores(expr_matrix, marker_genes)

fwrite(as.data.table(result$scores, keep.rownames = "Sample"),
       "/hb/home/mchalama/toti/Yoshi_totipotency_scores_E-MTAB-10581.csv")

cat("Final Totipotency Score (Mean Raw Score):", result$overall_score, "\n")

required_packages <- c("Seurat", "readxl", "data.table", "dplyr", "ggplot2", "ggrepel",
                       "cowplot", "SeuratObject", "Matrix", "patchwork")

for (pkg in required_packages) {
  if (!require(pkg, character.only = TRUE)) {
    install.packages(pkg, repos = "http://cran.us.r-project.org")
  }
}

library(Seurat)
library(readxl)
library(data.table)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(cowplot)
library(Matrix)
library(patchwork)

theme_set(theme_bw(base_size = 10))
theme(plot.title = element_text(hjust=0.5))

marker_file <- "/hb/home/mchalama/toti/List_of_Markers.xlsx"
markers <- read_excel(marker_file)
marker_genes <- toupper(markers$Gene)

process_raw_counts <- function(count_file) {
  raw_counts <- fread(count_file, header = TRUE, sep = "\t")

  if (!("gene" %in% colnames(raw_counts))) {
    stop("The count file must have a 'gene' column.")
  }

  raw_counts[, gene := toupper(gsub("\\..*", "", trimws(gene)))]

  raw_counts <- raw_counts[, lapply(.SD, sum, na.rm = TRUE), by = gene]

  setDF(raw_counts)
  rownames(raw_counts) <- raw_counts$gene
  raw_counts$gene <- NULL

  return(raw_counts)
}

expr_matrix <- process_raw_counts("E-MTAB-10581_raw-count.tsv")

seurat_obj <- CreateSeuratObject(counts = expr_matrix, project = "Totipotency", min.cells = 3, min.features = 200)

seurat_obj <- NormalizeData(seurat_obj, normalization.method = "LogNormalize", scale.factor = 10000)

seurat_obj <- FindVariableFeatures(seurat_obj, selection.method = "vst", nfeatures = 2000)

all.genes <- rownames(seurat_obj)
seurat_obj <- ScaleData(seurat_obj, features = all.genes)

seurat_obj <- RunPCA(seurat_obj, features = VariableFeatures(object = seurat_obj))

seurat_obj <- FindNeighbors(seurat_obj, dims = 1:30)
seurat_obj <- FindClusters(seurat_obj, resolution = 0.5)

seurat_obj <- RunUMAP(seurat_obj, dims = 1:30)

DimPlot(seurat_obj, reduction = "umap", group.by = "seurat_clusters") + ggtitle("UMAP Clustering")

calculate_cluster_scores <- function(seurat_obj, markers) {
  cluster_scores <- list()

  for (cluster in unique(Idents(seurat_obj))) {
    cells_in_cluster <- WhichCells(seurat_obj, idents = cluster)
    cluster_subset <- subset(seurat_obj, cells = cells_in_cluster)

    present_markers <- markers[markers %in% rownames(cluster_subset)]

    if (length(present_markers) > 0) {
      scores <- GetAssayData(cluster_subset, slot = "counts")[present_markers, , drop = FALSE]
      totipotency_score <- mean(colSums(scores, na.rm = TRUE))
    } else {
      totipotency_score <- 0
    }

    cluster_scores[[as.character(cluster)]] <- totipotency_score
  }

  return(cluster_scores)
}

totipotency_scores <- calculate_cluster_scores(seurat_obj, marker_genes)

best_cluster <- names(which.max(unlist(totipotency_scores)))
cat("Cluster with highest totipotency:", best_cluster, " Score:", totipotency_scores[[best_cluster]], "\n")

seurat_best_cluster <- subset(seurat_obj, idents = best_cluster)

DimPlot(seurat_best_cluster, reduction = "umap") + ggtitle(paste("Best Cluster UMAP (Cluster", best_cluster, ")"))

fwrite(as.data.table(list(cluster = best_cluster, score = totipotency_scores[[best_cluster]])),
       "/hb/home/mchalama/toti/Yoshi_best_totipotency_cluster.csv")

VlnPlot(seurat_best_cluster, features = marker_genes, group.by = "seurat_clusters", assay = "RNA") +
  ggtitle("Expression of Totipotency Markers in Best Cluster")

DotPlot(seurat_best_cluster, features = marker_genes, group.by = "seurat_clusters") +
  theme(axis.text.x = element_text(angle = 30, hjust = 1), axis.title.x = element_blank()) +
  guides(fill=FALSE) +
  ggtitle("Marker Gene Expression in Best Cluster")

FeatureScatter(seurat_best_cluster, feature1 = "ZSCAN4", feature2 = "LEUTX", group.by = 'seurat_clusters', slot = 'counts') +
  ggtitle("ZSCAN4 vs LEUTX Expression in Best Cluster")

FeatureScatter(seurat_best_cluster, feature1 = "DUXA", feature2 = "MBD3L3", group.by = 'seurat_clusters', slot = 'counts') +
  ggtitle("DUXA vs MBD3L3 Expression in Best Cluster")

required_packages <- c("Seurat", "readxl", "data.table", "dplyr")

for (pkg in required_packages) {
  if (!require(pkg, character.only = TRUE)) {
    install.packages(pkg, repos = "http://cran.us.r-project.org")
  }
}

library(Seurat)
library(readxl)
library(data.table)
library(dplyr)

marker_file <- "/hb/home/mchalama/toti/List_of_Markers.xlsx"
markers <- read_excel(marker_file)
marker_genes <- toupper(markers$Gene)

process_expression_file <- function(file) {
  expr_data <- fread(file, header = TRUE, sep = "\t")

  setnames(expr_data, c("GeneID", "Uniq_reads_num", "Length", "Coverage", "RPKM"))

  expr_data[, GeneID := toupper(GeneID)]

  expr_data <- expr_data[, .(GeneID, RPKM)]

  expr_data <- expr_data[!grepl("^[0-9.]+$", GeneID)]

  setDF(expr_data)
  rownames(expr_data) <- expr_data$GeneID
  expr_data$GeneID <- NULL

  return(expr_data)
}

calculate_scores <- function(expr_matrix, markers) {
  present_markers <- markers[markers %in% rownames(expr_matrix)]

  num_markers_found <- length(present_markers)

  cat("Markers Found:", num_markers_found, "/", length(markers), "\n")

  if (num_markers_found == 0) {
    stop("No matching markers found in dataset.")
  }

  scores <- expr_matrix[present_markers, , drop = FALSE]

  totipotency_score <- colSums(scores, na.rm = TRUE)

  return(list(score = totipotency_score, num_markers = num_markers_found))
}

expression_files <- c(
  "GSM922158_Sample_A1.expression.txt", "GSM922159_Sample_A2.expression.txt",
  "GSM922160_Sample_A3.expression.txt", "GSM922161_Sample_A4.expression.txt",
  "GSM922162_Sample_A5.expression.txt", "GSM922163_Sample_A6.expression.txt",
  "GSM922164_Sample_A7.expression.txt", "GSM922165_Sample_A8.expression.txt",
  "GSM922166_Sample_E1.expression.txt", "GSM922167_Sample_E2.expression.txt",
  "GSM922168_Sample_E3.expression.txt", "GSM922169_Sample_E4.expression.txt",
  "GSM922170_Sample_K1.expression.txt", "GSM922171_Sample_K2.expression.txt",
  "GSM922172_Sample_K3.expression.txt", "GSM922173_Sample_K4.expression.txt",
  "GSM922174_Sample_K5.expression.txt", "GSM922175_Sample_K6.expression.txt",
  "GSM922176_Sample_K7.expression.txt", "GSM922177_Sample_K8.expression.txt"
)

totipotency_scores <- data.table(Cell = character(), Score = numeric())
max_markers_found <- 0

for (file in expression_files) {
  cat("Processing:", file, "\n")

  expr_matrix <- process_expression_file(file)
  result <- calculate_scores(expr_matrix, marker_genes)

  totipotency_scores <- rbind(totipotency_scores, data.table(Cell = file, Score = result$score))

  if (result$num_markers > max_markers_found) {
    max_markers_found <- result$num_markers
  }
}

overall_totipotency_score <- mean(totipotency_scores$Score, na.rm = TRUE)

output_file <- "/hb/home/mchalama/toti/Totipotency_Scores_Per_Cell.csv"
fwrite(totipotency_scores, output_file)

cat("\nOverall Totipotency Score:", overall_totipotency_score, "\n")
cat("Maximum Markers Found in a Single Dataset:", max_markers_found, "/", length(marker_genes), "\n")
cat("Totipotency scores per cell saved to:", output_file, "\n")